name: ReadingList

options:
  groupSortPosition: top
  usesTabs: false
  indentWith: 4
  bundleIdPrefix: com.andrewbennet

packages:
  SwiftyJSON:
    url: https://github.com/SwiftyJSON/SwiftyJSON
    minorVersion: 5.0.0
  Promises:
    url: https://github.com/google/promises
    minorVersion: 1.2.0
  Cosmos:
    url: https://github.com/evgenyneu/Cosmos
    minorVersion: 20.0.0
  SwiftyStoreKit:
    url: https://github.com/bizz84/SwiftyStoreKit
    minorVersion: 0.15.0
  Swifter:
    url: https://github.com/httpswift/swifter
    branch: stable 

targets:
  ReadingList:
    type: application
    platform: iOS
    deploymentTarget: 11.0
    sources: [ReadingList]
    scheme:
      testTargets:
        - ReadingList_UnitTests
        - ReadingList_UITests
    dependencies:
      - sdk: StoreKit.framework
      - target: ReadingList_Foundation
      - package: SwiftyJSON
      - package: Promises
      - package: Cosmos
      - package: SwiftyStoreKit
    preBuildScripts:
      - name: SwiftLint
        script: |
                if [[ -z $CI ]]; then
                  "/usr/local/bin/swiftlint" --path "${PROJECT_DIR}"
                fi
    postBuildScripts:
      - name: "[CP] Embed Pods Frameworks"
        script:
      - name: Run Fabric Script
        inputFiles: [$(BUILT_PRODUCTS_DIR)/$(INFOPLIST_PATH)]
        script: |
                "${PODS_ROOT}/Fabric/run"
    settings:
      base:
        CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED: YES
        CODE_SIGN_STYLE: Manual
        CODE_SIGN_ENTITLEMENTS: ReadingList/ReadingList.entitlements
        DEBUG_INFORMATION_FORMAT: dwarf-with-dsym
        DEVELOPMENT_TEAM: YPDEV2E775
        PRODUCT_BUNDLE_IDENTIFIER: com.andrewbennet.books
      configs:
        Debug:
          PROVISIONING_PROFILE_SPECIFIER: match Development com.andrewbennet.books
          OTHER_SWIFT_FLAGS: $(inherited) "-D" "DEBUG"
        Release:
          PROVISIONING_PROFILE_SPECIFIER: match AppStore com.andrewbennet.books
          CODE_SIGN_IDENTITY[sdk=iphoneos*]: "iPhone Distribution: Andrew Bennet (YPDEV2E775)"
          OTHER_SWIFT_FLAGS: $(inherited) "-D" "RELEASE"
    attributes:
      SystemCapabilities:
        com.apple.iCloud:
          enabled: 1
        com.apple.InAppPurchase:
          enabled: 1

  ReadingList_Foundation:
    type: framework
    platform: iOS
    deploymentTarget: 11.0
    sources: [ReadingList_Foundation]
    dependencies:
     - package: SwiftyJSON

  ReadingList_UnitTests:
    type: bundle.unit-test
    platform: iOS
    deploymentTarget: 11.0
    sources: [ReadingList_UnitTests]
    dependencies:
      - target: ReadingList

  ReadingList_UITests:
    type: bundle.ui-testing
    platform: iOS
    deploymentTarget: 11.0
    sources:
      - path: ReadingList_UITests
      - path: ReadingList/Api/GoogleBooksRequest.swift
    dependencies:
      - target: ReadingList
      - package: Swifter
    scheme:
      testTargets:
        - ReadingList_UITests
      preActions:
        - name: Set simulator status bar overrides
          settingsTarget: ReadingList_UITests
          script: |
                  function version {
                      echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
                  }

                  if [[ "${SDKROOT}" != *"simulator"* ]]; then
                      exit 0;
                  fi

                  if [ $(version "${TARGET_DEVICE_OS_VERSION}") -ge $(version "13") ]; then
                      xcrun simctl boot "${TARGET_DEVICE_IDENTIFIER}";
                      xcrun simctl status_bar "${TARGET_DEVICE_IDENTIFIER}" override --dataNetwork wifi --wifiMode active --wifiBars 3 --cellularMode notSupported --batteryState discharging --batteryLevel 100;
                  fi
      postActions:
        - name: Reset simulator status bar
          settingsTarget: ReadingList_UITests
          script: |
                  function version {
                      echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
                  }

                  if [[ "${SDKROOT}" != *"simulator"* ]]; then
                      exit 0;
                  fi

                  if [ $(version "${TARGET_DEVICE_OS_VERSION}") -ge $(version "13") ]; then
                      xcrun simctl boot "${TARGET_DEVICE_IDENTIFIER}";
                      xcrun simctl status_bar "${TARGET_DEVICE_IDENTIFIER}" clear;
                  fi
